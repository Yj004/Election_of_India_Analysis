# -*- coding: utf-8 -*-
"""CONSTRUCT_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AIfxSQHc81QYjfmTC_m2C27vz5n3nCJ6

#### Importing Important Packages
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

"""### Cleaning Table 1

##### Getting Table 1
"""

url = 'https://raw.githubusercontent.com/imad-ul-haque/Pixel-Pioneers_008/Anjani-Nandan/Election_Scrapped_%28table1%29.csv'
t1 = pd.read_csv(url)

t1.info()

t1.isnull().sum()

"""##### Cleaning 'election_year'"""

t1['election_year'].value_counts()

t1.isnull().sum()

"""Everything seems to be in order, so let's move on.

##### Cleaning 'pc_name'
"""

t1['pc_name'].value_counts()

"""##### Cleaning 'pc_no'"""

t1['pc_no'].value_counts()

"""Again, everything seems to be in order

##### Cleaning 'type_category'
"""

t1['type_category'].value_counts()

"""Not sure what GENP is, but we will get to know it later, for now, let's move on."""

t1[t1['type_category'].isnull() == True]

t1['type_category'].fillna('Data Not Found/Provided', inplace = True)
print(t1.shape)

t1['type_category'].isnull().sum()

"""I researched about this, It was interesting that the 'type_category' data is maily missing in Andhra Pradesh post 2014 (Breakup of the state), but I could find nothing which points towards a shift in either the way people or parties think about caste in politics in Andhra or any government directive/order which might be relevant, so I am replacing for now the NaN values in this column with 'Data Not Available/Provided'

##### Cleaning 'state'
"""

t1['state'].value_counts()

"""New States are a concern, but otherwise, everything seem to be good.

##### Cleaning 'winning_candidate'
"""

t1['winning_candidate'].value_counts()

t1[t1['winning_candidate'] == "Data Not Available"]['election_year']

t1['winning_candidate'].isnull().sum()

"""We will leave them as they are, lest connections not get disrupted, but at the end, if we face an problems regarding elections, we will drop these values.

##### Cleaning 'party'
"""

t1['party'].value_counts()

"""Everything seems to be in order.

##### Cleaning 'electors'
"""

t1['electors'].value_counts()
print(t1.info())

t1['electors'].isnull().sum()

t1['electors'] = t1['electors'].str.replace('-','0').str.replace(',', '')

t1['electors'].value_counts()

t1['electors'] = pd.to_numeric(t1['electors'])

t1.info()

"""##### Cleaning 'votes'"""

t1['votes'].value_counts()

t1[((t1['votes'] == '-') | (t1['votes'] == 'RU') | t1['votes'].isnull() == True )]

"""All these values range from 1977-1990's, a period of emergence followed by tremendous turbulance in many states, we are assuming elections either didn't occur or circumstances were difficult to enforce the results. Thus, we will replace all these values with 0 as we don't want to delete these but at the same time we want some dummy value which can be easily recognized."""

t1['votes'] = t1['votes'].str.replace(',', '')

t1[t1['votes'] == "RU"]

t1['votes'] = t1['votes'].str.replace('RU', '0').str.replace('-', '0')
t1['votes'].value_counts()

t1['votes'].isnull().sum()

t1['votes'].fillna('0', inplace = True)

t1['votes'].value_counts()

t1['votes'] = pd.to_numeric(t1['votes'])

t1['votes'].value_counts()

"""##### Cleaning 'turnout'"""

t1['turnout'].isnull().sum()

t1['turnout'].value_counts() # turnout is the number of voters who showed up/eligible votes in a consituency

t1['turnout'] = t1['turnout'].str.replace('-', '0')
t1['turnout'].value_counts()

"""###### Functions to Filter Ratios and non ratios"""

def convert_ratio(x):
  try:
    percentage = round(float(x) * 100, 2) # this would apply to 0 too, but would return 0 itself
    return percentage
  except ValueError:
    return x

# float("0.1") * 100

beforecount = t1[t1['turnout'].str.find('%') == -1]['turnout'].value_counts().nlargest(100)

t1['turnout'] = t1['turnout'].apply(convert_ratio)

aftercount = t1[t1['turnout'].str.find('%') == -1]['turnout'].value_counts().nlargest(100)

t1.isnull().sum()

t1['turnout'].value_counts()

t1['turnout'].fillna('0', inplace = True)

t1.isnull().sum()

t1['turnout'].value_counts()

"""###### A simple function to find and replace values which contain '%' since we have mixed dtype values"""

def replace_symbol(x):
  x = str(x)
  if '%' in str(x):
    x = x.replace('%', '').replace(' ', '')
    return x
  else:
    return x

t1['turnout'] = t1['turnout'].apply(replace_symbol)

t1.isnull().sum()

t1['turnout'] = pd.to_numeric(t1['turnout'])

t1['turnout'].isnull().sum()

"""##### Cleaning 'margin'"""

t1['margin'].isnull().sum()

t1['margin'].value_counts()

t1['margin'] = t1['margin'].str.replace('RU', '0').str.replace('-','0').str.replace(',', '')

t1['margin'].isnull().sum()

t1['margin'].fillna('0', inplace = True)

t1.isnull().sum()

t1['margin'] = pd.to_numeric(t1['margin'])

t1['margin'].isnull().sum()

"""##### Cleaning 'margin_percent'"""

t1['margin_percent'].isnull().sum()

t1['margin_percent'].value_counts()

t1['margin_percent'] = t1['margin_percent'].apply(convert_ratio)
t1['margin_percent'] = t1['margin_percent'].apply(replace_symbol)

t1['margin_percent'].value_counts()

t1.isnull().sum()

t1['margin_percent'].fillna('0', inplace = True)
t1['margin_percent'] = t1['margin_percent'].str.replace('nan', '0').str.replace('-', '0')

t1.info()

t1['margin_percent'].value_counts()

t1['margin_percent'].isnull().sum()

t1['margin_percent'] = pd.to_numeric(t1['margin_percent'])

t1.to_csv("Table_1_Cleaned.csv")

"""Some values in t1['turnout'] is in form of a ratio and other are in percentage, we can turn everything into a percentage or a ratio. Since, percentages are more common, we will go ahead and convert that ratio into a percentage.

### Cleaning Table 2

#### Importing Data
"""

t2 = pd.read_csv("https://raw.githubusercontent.com/imad-ul-haque/Pixel-Pioneers_008/Anjani-Nandan/Table_2_part_1.csv")

"""#### Cleaning Data"""

t2.info()

t2.head()

"""##### Cleaning 'electors'"""

t2['electors'] = t2['electors'].str.replace('Electors:', '').str.replace(' ', '').str.replace(',', '')
t2['electors'] = pd.to_numeric(t2['electors'])
t2['electors'].value_counts()

"""##### Cleaning 'male_electors'"""

t2['male_electors'] = t2['male_electors'].str.replace('Male Electors: ', '').str.replace(',', '')
t2['male_electors'] = pd.to_numeric(t2['male_electors'])
t2['male_electors'].value_counts()

"""##### Cleaning 'booths'"""

t2['booths'] = t2['booths'].str.replace('Booths: ', '').str.replace(',', '')
t2['booths'] = pd.to_numeric(t2['booths'])
t2.info()
print(t2.head(1))

t2['booths'].value_counts()

"""##### Cleaning 'female_electors'"""

t2['female_electors'] = t2['female_electors'].str.replace('Female Electors: ', '').str.replace(',', '')
t2['female_electors'] = pd.to_numeric(t2['female_electors'])
t2.info()

"""##### Renaming 'Unnamed: 0'"""

t2 = t2.rename(columns = {"Unnamed: 0": "ID"})

"""##### Cleaning 'votes_polled'

###### Defining a simple function to filter out not_numeric values
"""

def not_numeric(x):
  try:
    float(x)
    return False
  except ValueError:
    return True

t2['votes_polled'].value_counts()

t2['votes_polled'] = t2['votes_polled'].str.replace('Total Votes Polled: ', '').str.replace(',','')
t2['votes_polled'].value_counts()

t2[['votes_polled', 'votes_polled_percentage']] = t2['votes_polled'].str.split(' ', n = 1, expand = True)

t2['votes_polled'].value_counts()

t2[t2['votes_polled'].apply(not_numeric)]['votes_polled']

"""So, we can see that we only have 1 type of non-numeric values in t2['votes_polled'], so we can just use replace method to deal with these values, we will use median of the rest of the rows to replace this"""

dummy_vp = pd.to_numeric(t2[~t2['votes_polled'].apply(not_numeric)]['votes_polled'])
median_vp = str(dummy_vp.median()) # with replace method, I can only replace it with a string
median_vp

# So, now we will replace the non-numeric values and then covert the whole column to numeric
t2['votes_polled'] = t2['votes_polled'].str.replace('Margin:', median_vp)
t2['votes_polled'] = pd.to_numeric(t2['votes_polled'])
t2['votes_polled'].value_counts()

"""###### Cleaning 'votes_polled_percentage'"""

t2['votes_polled_percentage'] = t2['votes_polled_percentage'].str.replace('(', '').str.replace(')', '').str.replace('%', '')
t2['votes_polled_percentage'].value_counts()

"""I know some of the values in votes_polled_percentage is non-numeric, i.e., that would hinder our analysis, but I am not sure how to do it.  I will use the not_numeric function

We have 4 RU NA value, in order to replace this, we will use mean of the rest of the values, but before that we have to convert the rest of the values to numeric. We would have had to apply a different method if there were many non-numeric values
"""

dummy_column = pd.to_numeric(t2[~t2['votes_polled_percentage'].apply(not_numeric)]['votes_polled_percentage'])
median_vpp = dummy_column.median()
median_vpp = str(median_vpp)

t2['votes_polled_percentage'] = t2['votes_polled_percentage'].str.replace('RU NA', median_vpp) # A string replace function would only agree to replace it with another string.

t2['votes_polled_percentage'] = pd.to_numeric(t2['votes_polled_percentage'])

t2['votes_polled_percentage'].value_counts()

t2.info()

t2.head(1)

t2['votes_polled_percentage'].value_counts()

"""##### Cleaning 'male_voters'"""

t2['male_voters'].value_counts()

t2['male_voters'] = t2['male_voters'].str.replace('Total Male Voters: ', '').str.replace(',', '')
t2['male_voters'] = pd.to_numeric(t2['male_voters'])

t2.info()

t2['male_voters'].value_counts()

t2.head()



"""##### Cleaning 'female_voters'"""

t2['female_voters'].value_counts()

t2['female_voters'] = t2['female_voters'].str.replace(',', '').str.replace('Female Voters: ', '')
t2['female_voters'] = pd.to_numeric(t2['female_voters'])

t2['female_voters'].value_counts()

t2.shape



"""### Cleaning Table 3

##### Getting Table 3
"""

t3 = pd.read_csv("https://raw.githubusercontent.com/imad-ul-haque/Pixel-Pioneers_008/Jaishree-Yadav/Lok_Sabha_Table_3.csv")

"""##### Getting a basic idea about the data"""

t3.info()

"""##### Cleaning  election_year"""

print(t3['election_year'].value_counts(), '\n\n', t3['election_year'].isnull().sum(), '\n\n')
print( "Non-Numeric Values are", t3['election_year'].apply(not_numeric).sum())

"""Everything seems to be in order here

##### Cleaning  pc_name
"""

print(t3['pc_name'].value_counts(), '\n\n', t3['pc_name'].isnull().sum())

"""Everything seems to be in order here

##### Cleaning  pc_no
"""

print(t3['pc_no'].value_counts(), '\n\n', t3['pc_no'].isnull().sum())
print("The number of non-numeric rows are ", t3['pc_no'].apply(not_numeric).sum())

"""##### Cleaning  position"""

print(t3['position'].value_counts(), '\n\n', t3['position'].isnull().sum())
print("The number of non-numeric rows are ", t3['position'].apply(not_numeric).sum())

"""Everything seems to be in Order here

##### Cleaning  Candidate_Name
"""

print(t3['Candidate_Name'].value_counts(), '\n\n', t3['Candidate_Name'].isnull().sum())
print("The number of non-numeric rows are ", t3['Candidate_Name'].apply(not_numeric).sum())
t3.shape

"""Everything seems to be in order here

##### Cleaning  Votes
"""

print(t3['Votes'].value_counts(), '\n\n', t3['Votes'].isnull().sum())
print("The number of non-numeric rows are ", t3['Votes'].apply(not_numeric).sum())

t3[t3['Votes'].apply(not_numeric)]["Votes"]



"""###### Write a function which would replace ',' in strings but leave numerics as it is"""

def replacecomma(x):
  if type(x) == str:
    x = x.replace(',', '').replace('RU', '0')
    return x
  else:
    return x

t3['Votes'] = t3['Votes'].apply(replacecomma)

print(t3['Votes'].value_counts(), '\n\n', t3['Votes'].isnull().sum())
print("The number of non-numeric rows are ", t3['Votes'].apply(not_numeric).sum())

t3[t3['Votes'].isnull()]

t3['Votes'].fillna("0", inplace = True)

t3[t3['Votes'].isnull()]

t3['Votes'] = pd.to_numeric(t3['Votes'])
t3['Votes'].shape

"""##### Cleaning  Votes_Percentage"""

print(t3['Votes_Percentage'].value_counts(), '\n\n', t3['Votes_Percentage'].isnull().sum())
print("The number of non-numeric rows are ", t3['Votes_Percentage'].apply(not_numeric).sum())

t3['Votes_Percentage'].value_counts()

t3['Votes_Percentage'] = t3['Votes_Percentage'].apply(convert_ratio)
t3['Votes_Percentage'] = t3['Votes_Percentage'].apply(replace_symbol)

t3['Votes_Percentage'].value_counts()

"""##### Cleaning  Party"""

print(t3['Party'].value_counts(), '\n\n', t3['Party'].isnull().sum())
print("The number of non-numeric rows are ", t3['Party'].apply(not_numeric).sum())